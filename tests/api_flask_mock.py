
from flask import Flask, jsonify, request
import json
import os

"""
This is a flask REST API that mocks the Rescale HTC API.
It returns the values from the examples shown in the REST
API documentation for each of the possible status codes.

This REST API can then be used to test the rescalehtc library.
"""

app = Flask(__name__)

# We custom implement the /auth/token endpoint, as that is used to test authentication
# We use a short expiry and a dummy token

@app.route("/auth/token", methods=["GET"])
def endpoint_GET__auth_token():
    target_status = request.args.get('targetStatus', None)
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "tokenValue": "vQC4m+n9rBWWY50OyBVwoA==",
  "expiresIn": 10800
}
""")), 200 )
    raise Exception

# We custom implement the image status endpoint, as we need this to return READY
# to be able to progress a job start API request
@app.route("/htc/projects/<projectId>/container-registry/images/<imageName>", methods=["GET"])
def endpoint_GET__htc_projects_projectId_container_registry_images_imageName_(projectId, imageName):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "status": "READY"
}
""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

# The rest of the file is generated using the ./generate_api_mock.py script

# START_AUTOGENERATED_API


@app.route("/.well-known/jwks.json", methods=["GET"])
def endpoint_GET__well_known_jwks_json():
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "keys": [
    {
      "use": "string",
      "keyId": "string",
      "algorithm": "string",
      "keyOps": [
        "string"
      ],
      "otherParameters": {
        "additionalProp1": "string",
        "additionalProp2": "string",
        "additionalProp3": "string"
      },
      "key": {
        "algorithm": "string",
        "format": "string",
        "encoded": "string"
      },
      "keyType": "string",
      "publicKey": {
        "algorithm": "string",
        "format": "string",
        "encoded": "string"
      }
    }
  ],
  "jsonWebKeys": [
    {
      "use": "string",
      "keyId": "string",
      "algorithm": "string",
      "keyOps": [
        "string"
      ],
      "otherParameters": {
        "additionalProp1": "string",
        "additionalProp2": "string",
        "additionalProp3": "string"
      },
      "key": {
        "algorithm": "string",
        "format": "string",
        "encoded": "string"
      },
      "keyType": "string",
      "publicKey": {
        "algorithm": "string",
        "format": "string",
        "encoded": "string"
      }
    }
  ]
}""")), 200 )
    if target_status == 401:
        return (jsonify(json.loads("""{
  "error": "string",
  "errorDescription": "string"
}""")), 401 )
    raise Exception

@app.route("/auth/token/whoami", methods=["GET"])
def endpoint_GET__auth_token_whoami():
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return ('"string"', 200 )
    if target_status == 401:
        return (jsonify(json.loads("""{
  "error": "string",
  "errorDescription": "string"
}""")), 401 )
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/auth/whoami", methods=["GET"])
def endpoint_GET__auth_whoami():
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "user": {
    "userId": "qWoUF",
    "email": "user1@rescale.com",
    "fullName": "Juliet Doe",
    "isRescaleAdmin": true,
    "isOrganizationAdmin": true,
    "isWorkspaceAdmin": true,
    "isSuperuser": true,
    "workspace": {
      "id": "04-8473942",
      "name": "Juliet's Workspace"
    },
    "organization": {
      "code": "849506",
      "canViewOrganizationJobs": true
    },
    "rescaleAdmin": true,
    "organizationAdmin": true,
    "workspaceAdmin": true,
    "superuser": true
  },
  "userFeatures": [
    {
      "count": 0,
      "results": [
        {
          "name": "string",
          "value": true
        }
      ]
    }
  ]
}""")), 200 )
    if target_status == 401:
        return (jsonify(json.loads("""{
  "error": "string",
  "errorDescription": "string"
}""")), 401 )
    raise Exception

@app.route("/oauth2/token", methods=["POST"])
def endpoint_POST__oauth2_token():
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "access_token": "string",
  "token_type": "string",
  "expires_in": 0
}""")), 200 )
    if target_status == 400:
        return (jsonify(json.loads("""{
  "error": "string",
  "errorDescription": "string"
}""")), 400 )
    raise Exception

@app.route("/htc/gcp/clusters/<workspaceId>", methods=["GET"])
def endpoint_GET__htc_gcp_clusters_workspaceId_(workspaceId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "gcpProjectId": "string",
  "jobStarter": {
    "version": "string",
    "qps": 0,
    "burst": 0
  },
  "htcClusterServicesVersion": "string",
  "htcClusterMonitoringVersion": "string",
  "healthStatus": "string",
  "syncStatus": "string",
  "operationState": {
    "phase": "string",
    "message": "string"
  },
  "clusters": [
    {
      "name": "string",
      "region": "AWS_AP_SOUTHEAST_1",
      "version": "string",
      "status": "string",
      "nodePools": [
        {
          "name": "string",
          "version": "string",
          "instanceType": "string",
          "status": "string",
          "autoscaling": {
            "enabled": true,
            "minNodeCount": 0,
            "maxNodeCount": 0
          }
        }
      ]
    }
  ]
}""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    if target_status == 404:
        return (jsonify(json.loads("""{
  "error": "string",
  "errorDescription": "string"
}""")), 404 )
    raise Exception

@app.route("/htc/regions", methods=["GET"])
def endpoint_GET__htc_regions():
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "name": "string",
  "resourceId": "string",
  "resourceStatus": "PASS"
}""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    if target_status == 404:
        return (jsonify(json.loads("""{
  "error": "string",
  "errorDescription": "string"
}""")), 404 )
    raise Exception

@app.route("/htc/regions/<region>", methods=["GET"])
def endpoint_GET__htc_regions_region_(region):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "region": "AWS_AP_SOUTHEAST_1",
  "enabled": true,
  "weight": 4,
  "updatedBy": "qWoUF",
  "updatedAt": "2022-03-10T16:15:50Z",
  "supportedArchitectures": [
    "AARCH64"
  ],
  "cloudProvider": "AWS"
}""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    if target_status == 404:
        return (jsonify(json.loads("""{
  "error": "string",
  "errorDescription": "string"
}""")), 404 )
    raise Exception

@app.route("/htc/metrics", methods=["GET"])
def endpoint_GET__htc_metrics():
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return ('string', 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects", methods=["GET"])
def endpoint_GET__htc_projects():
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "items": [
    {
      "projectId": "project-12345",
      "projectName": "my-project",
      "projectDescription": "my-first-project",
      "createdBy": "qWoUF",
      "workspaceId": "04-8473942",
      "organizationCode": "my-org",
      "createdAt": "2022-03-10T16:15:50Z",
      "containerRegistry": "123456789.dkr.ecr.us-west-2.amazonaws.com/rescale/project-12345/",
      "repositories": [
        "repo1",
        "repo2"
      ],
      "regions": [
        "AWS_US_EAST_2",
        "AWS_US_WEST_2"
      ],
      "regionSettings": [
        {
          "computeSettings": {
            "computeRegion": "AWS_AP_SOUTHEAST_1"
          },
          "storageSettings": {
            "storageRegion": "AWS_AP_SOUTHEAST_1"
          }
        }
      ],
      "projectFolderPath": "projects/project-12345/"
    }
  ],
  "next": "https://page2.com"
}""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects", methods=["POST"])
def endpoint_POST__htc_projects():
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "projectId": "project-12345",
  "projectName": "my-project",
  "projectDescription": "my-first-project",
  "createdBy": "qWoUF",
  "workspaceId": "04-8473942",
  "organizationCode": "my-org",
  "createdAt": "2022-03-10T16:15:50Z",
  "containerRegistry": "123456789.dkr.ecr.us-west-2.amazonaws.com/rescale/project-12345/",
  "repositories": [
    "repo1",
    "repo2"
  ],
  "regions": [
    "AWS_US_EAST_2",
    "AWS_US_WEST_2"
  ],
  "regionSettings": [
    {
      "computeSettings": {
        "computeRegion": "AWS_AP_SOUTHEAST_1"
      },
      "storageSettings": {
        "storageRegion": "AWS_AP_SOUTHEAST_1"
      }
    }
  ],
  "projectFolderPath": "projects/project-12345/"
}""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>", methods=["GET"])
def endpoint_GET__htc_projects_projectId_(projectId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "projectId": "project-12345",
  "projectName": "my-project",
  "projectDescription": "my-first-project",
  "createdBy": "qWoUF",
  "workspaceId": "04-8473942",
  "organizationCode": "my-org",
  "createdAt": "2022-03-10T16:15:50Z",
  "containerRegistry": "123456789.dkr.ecr.us-west-2.amazonaws.com/rescale/project-12345/",
  "repositories": [
    "repo1",
    "repo2"
  ],
  "regions": [
    "AWS_US_EAST_2",
    "AWS_US_WEST_2"
  ],
  "regionSettings": [
    {
      "computeSettings": {
        "computeRegion": "AWS_AP_SOUTHEAST_1"
      },
      "storageSettings": {
        "storageRegion": "AWS_AP_SOUTHEAST_1"
      }
    }
  ],
  "projectFolderPath": "projects/project-12345/"
}""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>", methods=["PATCH"])
def endpoint_PATCH__htc_projects_projectId_(projectId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "projectId": "project-12345",
  "projectName": "my-project",
  "projectDescription": "my-first-project",
  "createdBy": "qWoUF",
  "workspaceId": "04-8473942",
  "organizationCode": "my-org",
  "createdAt": "2022-03-10T16:15:50Z",
  "containerRegistry": "123456789.dkr.ecr.us-west-2.amazonaws.com/rescale/project-12345/",
  "repositories": [
    "repo1",
    "repo2"
  ],
  "regions": [
    "AWS_US_EAST_2",
    "AWS_US_WEST_2"
  ],
  "regionSettings": [
    {
      "computeSettings": {
        "computeRegion": "AWS_AP_SOUTHEAST_1"
      },
      "storageSettings": {
        "storageRegion": "AWS_AP_SOUTHEAST_1"
      }
    }
  ],
  "projectFolderPath": "projects/project-12345/"
}""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/dimensions", methods=["GET"])
def endpoint_GET__htc_projects_projectId_dimensions(projectId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""[
  {
    "derived": {
      "architecture": "AARCH64",
      "vCPUs": 0,
      "memory": 0
    },
    "machineType": "t2d-standard-16",
    "priority": "ON_DEMAND_PRIORITY",
    "region": "AWS_AP_SOUTHEAST_1",
    "computeScalingPolicy": "PROFILE_UNSPECIFIED",
    "hyperthreading": true
  }
]""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/dimensions", methods=["PUT"])
def endpoint_PUT__htc_projects_projectId_dimensions(projectId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 201:
        return (jsonify(json.loads("""[
  {
    "derived": {
      "architecture": "AARCH64",
      "vCPUs": 0,
      "memory": 0
    },
    "machineType": "t2d-standard-16",
    "priority": "ON_DEMAND_PRIORITY",
    "region": "AWS_AP_SOUTHEAST_1",
    "computeScalingPolicy": "PROFILE_UNSPECIFIED",
    "hyperthreading": true
  }
]""")), 201 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/limits", methods=["GET"])
def endpoint_GET__htc_projects_projectId_limits(projectId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""[
  {
    "createdBy": "qWoUF",
    "vCPUs": 999999,
    "updatedBy": "qWoUF",
    "updatedAt": "",
    "createdAt": "",
    "workspaceId": "04-8473942",
    "id": 1,
    "projectId": "project-12345",
    "modifierRole": "PROJECT_ADMIN"
  }
]""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/limits", methods=["POST"])
def endpoint_POST__htc_projects_projectId_limits(projectId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 201:
        return (jsonify(json.loads("""{
  "createdBy": "qWoUF",
  "vCPUs": 999999,
  "updatedBy": "qWoUF",
  "updatedAt": "",
  "createdAt": "",
  "workspaceId": "04-8473942",
  "id": 1,
  "projectId": "project-12345",
  "modifierRole": "PROJECT_ADMIN"
}""")), 201 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/limits", methods=["DELETE"])
def endpoint_DELETE__htc_projects_projectId_limits(projectId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 204:
        return "", 204
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/limits/<id>", methods=["GET"])
def endpoint_GET__htc_projects_projectId_limits_id_(projectId, id):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "createdBy": "qWoUF",
  "vCPUs": 999999,
  "updatedBy": "qWoUF",
  "updatedAt": "",
  "createdAt": "",
  "workspaceId": "04-8473942",
  "id": 1,
  "projectId": "project-12345",
  "modifierRole": "PROJECT_ADMIN"
}""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/limits/<id>", methods=["DELETE"])
def endpoint_DELETE__htc_projects_projectId_limits_id_(projectId, id):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 204:
        return "", 204
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/limits/<id>", methods=["PATCH"])
def endpoint_PATCH__htc_projects_projectId_limits_id_(projectId, id):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "createdBy": "qWoUF",
  "vCPUs": 999999,
  "updatedBy": "qWoUF",
  "updatedAt": "",
  "createdAt": "",
  "workspaceId": "04-8473942",
  "id": 1,
  "projectId": "project-12345",
  "modifierRole": "PROJECT_ADMIN"
}""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/storage/presigned-url", methods=["GET"])
def endpoint_GET__htc_projects_projectId_storage_presigned_url(projectId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "url": "https://presigned-put-url/my-storage",
  "storageName": "my-storage",
  "region": "AWS_AP_SOUTHEAST_1",
  "expiration": "2022-03-10T16:15:50Z"
}""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/storage/token", methods=["GET"])
def endpoint_GET__htc_projects_projectId_storage_token(projectId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "projectSharedStoragePath": "s3://my-storage/projects/project-12345/shared/",
  "projectId": "project-12345",
  "storageName": "my-storage",
  "region": "AWS_AP_SOUTHEAST_1",
  "user": "123456789:qWoUF",
  "expiration": "2022-03-10T16:15:50Z",
  "credentials": {
    "AWS_ACCESS_KEY_ID": "key-12345",
    "AWS_SECRET_ACCESS_KEY": "secret-key-12345789",
    "AWS_SESSION_TOKEN": "token-12345////12345"
  },
  "provider": "AWS"
}""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/storage/token/<region>", methods=["GET"])
def endpoint_GET__htc_projects_projectId_storage_token_region_(projectId, region):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "projectSharedStoragePath": "s3://my-storage/projects/project-12345/shared/",
  "projectId": "project-12345",
  "storageName": "my-storage",
  "region": "AWS_AP_SOUTHEAST_1",
  "user": "123456789:qWoUF",
  "expiration": "2022-03-10T16:15:50Z",
  "credentials": {
    "AWS_ACCESS_KEY_ID": "key-12345",
    "AWS_SECRET_ACCESS_KEY": "secret-key-12345789",
    "AWS_SESSION_TOKEN": "token-12345////12345"
  },
  "provider": "AWS"
}""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/storage/tokens", methods=["GET"])
def endpoint_GET__htc_projects_projectId_storage_tokens(projectId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "defaultRegion": "AWS_AP_SOUTHEAST_1",
  "regionStores": [
    {
      "projectSharedStoragePath": "s3://my-storage/projects/project-12345/shared/",
      "projectId": "project-12345",
      "storageName": "my-storage",
      "region": "AWS_AP_SOUTHEAST_1",
      "user": "123456789:qWoUF",
      "expiration": "2022-03-10T16:15:50Z",
      "credentials": {
        "AWS_ACCESS_KEY_ID": "key-12345",
        "AWS_SECRET_ACCESS_KEY": "secret-key-12345789",
        "AWS_SESSION_TOKEN": "token-12345////12345"
      },
      "provider": "AWS"
    }
  ]
}""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/task-retention-policy", methods=["GET"])
def endpoint_GET__htc_projects_projectId_task_retention_policy(projectId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "projectId": "project-12345",
  "deleteAfter": 24,
  "archiveAfter": 168,
  "createdAt": "2022-03-10T16:15:50Z"
}""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/task-retention-policy", methods=["PUT"])
def endpoint_PUT__htc_projects_projectId_task_retention_policy(projectId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 201:
        return (jsonify(json.loads("""{
  "projectId": "project-12345",
  "deleteAfter": 24,
  "archiveAfter": 168,
  "createdAt": "2022-03-10T16:15:50Z"
}""")), 201 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/task-retention-policy", methods=["DELETE"])
def endpoint_DELETE__htc_projects_projectId_task_retention_policy(projectId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 204:
        return "", 204
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/container-registry/images", methods=["GET"])
def endpoint_GET__htc_projects_projectId_container_registry_images(projectId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "containerRegistry": "123456789.dkr.ecr.us-west-2.amazonaws.com/rescale/project-12345/",
  "images": [
    "repo1:latest",
    "repo1:v2",
    "repo2:latest"
  ]
}""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/container-registry/repo/<repoName>", methods=["POST"])
def endpoint_POST__htc_projects_projectId_container_registry_repo_repoName_(projectId, repoName):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "repositoryName": "repo1",
  "successfullyCreated": true,
  "projectId": "project-12345",
  "createdBy": "qWoUF",
  "workspaceId": "04-8473942",
  "registryURI": "123456789.dkr.ecr.us-west-2.amazonaws.com/rescale/project-12345/"
}""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/container-registry/token", methods=["GET"])
def endpoint_GET__htc_projects_projectId_container_registry_token(projectId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return ('registry-token-12345', 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/tasks", methods=["GET"])
def endpoint_GET__htc_projects_projectId_tasks(projectId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "items": [
    {
      "projectId": "project-12345",
      "taskId": "task-12345",
      "taskName": "my-task",
      "taskDescription": "my sample task",
      "createdBy": "qWoUF",
      "createdAt": "2022-03-10T16:15:50Z",
      "lastActiveAt": "2022-03-10T16:15:50Z",
      "archivedAt": "2022-03-10T16:15:50Z",
      "deletedAt": "2022-03-10T16:15:50Z",
      "workspaceId": "04-8473942",
      "taskFolderPath": "projects/project-12345/tasks/task-12345",
      "lifecycleStatus": "ACTIVE"
    }
  ],
  "next": "https://page2.com"
}""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/tasks", methods=["POST"])
def endpoint_POST__htc_projects_projectId_tasks(projectId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "projectId": "project-12345",
  "taskId": "task-12345",
  "taskName": "my-task",
  "taskDescription": "my sample task",
  "createdBy": "qWoUF",
  "createdAt": "2022-03-10T16:15:50Z",
  "lastActiveAt": "2022-03-10T16:15:50Z",
  "archivedAt": "2022-03-10T16:15:50Z",
  "deletedAt": "2022-03-10T16:15:50Z",
  "workspaceId": "04-8473942",
  "taskFolderPath": "projects/project-12345/tasks/task-12345",
  "lifecycleStatus": "ACTIVE"
}""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/tasks/<taskId>", methods=["GET"])
def endpoint_GET__htc_projects_projectId_tasks_taskId_(projectId, taskId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "projectId": "project-12345",
  "taskId": "task-12345",
  "taskName": "my-task",
  "taskDescription": "my sample task",
  "createdBy": "qWoUF",
  "createdAt": "2022-03-10T16:15:50Z",
  "lastActiveAt": "2022-03-10T16:15:50Z",
  "archivedAt": "2022-03-10T16:15:50Z",
  "deletedAt": "2022-03-10T16:15:50Z",
  "workspaceId": "04-8473942",
  "taskFolderPath": "projects/project-12345/tasks/task-12345",
  "lifecycleStatus": "ACTIVE"
}""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/tasks/<taskId>", methods=["DELETE"])
def endpoint_DELETE__htc_projects_projectId_tasks_taskId_(projectId, taskId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "projectId": "project-12345",
  "taskId": "task-12345",
  "taskName": "my-task",
  "taskDescription": "my sample task",
  "createdBy": "qWoUF",
  "createdAt": "2022-03-10T16:15:50Z",
  "lastActiveAt": "2022-03-10T16:15:50Z",
  "archivedAt": "2022-03-10T16:15:50Z",
  "deletedAt": "2022-03-10T16:15:50Z",
  "workspaceId": "04-8473942",
  "taskFolderPath": "projects/project-12345/tasks/task-12345",
  "lifecycleStatus": "DELETED"
}""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/tasks/<taskId>", methods=["PATCH"])
def endpoint_PATCH__htc_projects_projectId_tasks_taskId_(projectId, taskId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "projectId": "project-12345",
  "taskId": "task-12345",
  "taskName": "my-task",
  "taskDescription": "my sample task",
  "createdBy": "qWoUF",
  "createdAt": "2022-03-10T16:15:50Z",
  "lastActiveAt": "2022-03-10T16:15:50Z",
  "archivedAt": "2022-03-10T16:15:50Z",
  "deletedAt": "2022-03-10T16:15:50Z",
  "workspaceId": "04-8473942",
  "taskFolderPath": "projects/project-12345/tasks/task-12345",
  "lifecycleStatus": "ACTIVE"
}""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/tasks/<taskId>/group-summary-statistics", methods=["GET"])
def endpoint_GET__htc_projects_projectId_tasks_taskId_group_summary_statistics(projectId, taskId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "items": [
    {
      "group": "my-job-group",
      "jobStatuses": {
        "SUBMITTED_TO_RESCALE": 5,
        "SUBMITTED_TO_PROVIDER": 5,
        "RUNNABLE": 5,
        "STARTING": 5,
        "RUNNING": 5,
        "SUCCEEDED": 5,
        "FAILED": 5
      }
    }
  ],
  "next": "https://page2.com"
}""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/tasks/<taskId>/groups", methods=["GET"])
def endpoint_GET__htc_projects_projectId_tasks_taskId_groups(projectId, taskId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""[
  "group1",
  "group2"
]""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/tasks/<taskId>/storage/presigned-url", methods=["GET"])
def endpoint_GET__htc_projects_projectId_tasks_taskId_storage_presigned_url(projectId, taskId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "url": "https://presigned-put-url/my-storage",
  "storageName": "my-storage",
  "region": "AWS_AP_SOUTHEAST_1",
  "expiration": "2022-03-10T16:15:50Z"
}""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/tasks/<taskId>/storage/regional-storage", methods=["GET"])
def endpoint_GET__htc_projects_projectId_tasks_taskId_storage_regional_storage(projectId, taskId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "rescaleRegion": "AWS_AP_SOUTHEAST_1",
  "regionalStores": [
    {
      "region": "AWS_AP_SOUTHEAST_1",
      "projectPath": "string",
      "taskPath": "string",
      "credentials": {
        "additionalProp1": "string",
        "additionalProp2": "string",
        "additionalProp3": "string"
      },
      "provider": "AWS"
    }
  ]
}""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/tasks/<taskId>/storage/token", methods=["GET"])
def endpoint_GET__htc_projects_projectId_tasks_taskId_storage_token(projectId, taskId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "projectSharedStoragePath": "s3://my-storage/projects/project-12345/shared/",
  "projectId": "project-12345",
  "storageName": "my-storage",
  "region": "AWS_AP_SOUTHEAST_1",
  "user": "123456789:qWoUF",
  "expiration": "2022-03-10T16:15:50Z",
  "credentials": {
    "AWS_ACCESS_KEY_ID": "key-12345",
    "AWS_SECRET_ACCESS_KEY": "secret-key-12345789",
    "AWS_SESSION_TOKEN": "token-12345////12345"
  },
  "provider": "AWS"
}""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/tasks/<taskId>/storage/token/<region>", methods=["GET"])
def endpoint_GET__htc_projects_projectId_tasks_taskId_storage_token_region_(projectId, taskId, region):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "projectSharedStoragePath": "s3://my-storage/projects/project-12345/shared/",
  "projectId": "project-12345",
  "storageName": "my-storage",
  "region": "AWS_AP_SOUTHEAST_1",
  "user": "123456789:qWoUF",
  "expiration": "2022-03-10T16:15:50Z",
  "credentials": {
    "AWS_ACCESS_KEY_ID": "key-12345",
    "AWS_SECRET_ACCESS_KEY": "secret-key-12345789",
    "AWS_SESSION_TOKEN": "token-12345////12345"
  },
  "provider": "AWS"
}""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/tasks/<taskId>/storage/tokens", methods=["GET"])
def endpoint_GET__htc_projects_projectId_tasks_taskId_storage_tokens(projectId, taskId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "defaultRegion": "AWS_AP_SOUTHEAST_1",
  "regionStores": [
    {
      "projectSharedStoragePath": "s3://my-storage/projects/project-12345/shared/",
      "projectId": "project-12345",
      "storageName": "my-storage",
      "region": "AWS_AP_SOUTHEAST_1",
      "user": "123456789:qWoUF",
      "expiration": "2022-03-10T16:15:50Z",
      "credentials": {
        "AWS_ACCESS_KEY_ID": "key-12345",
        "AWS_SECRET_ACCESS_KEY": "secret-key-12345789",
        "AWS_SESSION_TOKEN": "token-12345////12345"
      },
      "provider": "AWS"
    }
  ]
}""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/tasks/<taskId>/summary-statistics", methods=["GET"])
def endpoint_GET__htc_projects_projectId_tasks_taskId_summary_statistics(projectId, taskId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "group": "my-job-group",
  "jobStatuses": {
    "SUBMITTED_TO_RESCALE": 5,
    "SUBMITTED_TO_PROVIDER": 5,
    "RUNNABLE": 5,
    "STARTING": 5,
    "RUNNING": 5,
    "SUCCEEDED": 5,
    "FAILED": 5
  }
}""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/tasks/<taskId>/jobs", methods=["GET"])
def endpoint_GET__htc_projects_projectId_tasks_taskId_jobs(projectId, taskId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "items": [
    {
      "jobUUID": "155f18d4",
      "providerJobId": "provider-id-12345",
      "region": "AWS_AP_SOUTHEAST_1",
      "taskId": "task-12345",
      "projectId": "project-12345",
      "status": "SUBMITTED_TO_RESCALE",
      "statusReason": "Completed",
      "container": {
        "exitCode": 3,
        "reason": "Container Exited"
      },
      "createdAt": "2022-03-10T16:15:50Z",
      "createdBy": "qWoUF",
      "failureCode": "ErrorTimeout",
      "workspaceId": "04-8098234",
      "group": "sample-group",
      "commands": [
        "python",
        "script.py"
      ],
      "envs": [
        {
          "name": "FOO",
          "value": "bar"
        }
      ],
      "jobExecutionEnvironment": {
        "instanceId": "123456789",
        "instanceType": "c7g.medium",
        "architecture": 2
      },
      "tags": [
        {
          "key": "HOME",
          "value": "/home/users/"
        }
      ],
      "architecture": "AARCH64",
      "maxVCpus": 0,
      "maxMemory": 0,
      "maxDiskGiB": 0,
      "maxSwap": 0,
      "imageName": "string",
      "execTimeoutSeconds": 0,
      "updatedAt": "2022-03-10T16:15:50Z",
      "instanceId": "string",
      "instanceLabels": {
        "csp": "string",
        "priority": "string",
        "instanceType": "string",
        "instanceArchitecture": "string",
        "accountId": "string",
        "region": "string"
      },
      "startedAt": "2022-03-10T16:15:50Z",
      "completedAt": "2022-03-10T16:15:50Z"
    }
  ],
  "next": "https://page2.com"
}""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/tasks/<taskId>/jobs/batch", methods=["POST"])
def endpoint_POST__htc_projects_projectId_tasks_taskId_jobs_batch(projectId, taskId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""[
  {
    "jobName": "Sample job",
    "taskId": "task-12345",
    "projectId": "project-12345",
    "parentJobId": "job-12345",
    "createdBy": "qWoUF",
    "workspaceId": "04-8234074",
    "group": "sample-group",
    "batchSize": 10,
    "regions": [
      "AWS_AP_SOUTHEAST_1"
    ],
    "rescaleTimeReceived": "2022-03-10T16:15:50Z",
    "htcJobDefinition": {
      "imageName": "my-image",
      "maxVCpus": 8,
      "maxMemory": 128,
      "maxDiskGiB": 1,
      "maxSwap": 0,
      "tags": {
        "HOME": "foo_bar"
      },
      "commands": [
        "python",
        "script.py"
      ],
      "envs": [
        {
          "name": "FOO",
          "value": "bar"
        }
      ],
      "claims": [
        {
          "name": "string",
          "value": "string"
        }
      ],
      "execTimeoutSeconds": 300,
      "architecture": "AARCH64",
      "priority": "ON_DEMAND_PRIORITY"
    },
    "tags": [
      {
        "key": "HOME",
        "value": "/home/users/"
      }
    ],
    "retryStrategy": {
      "maxRetries": 10
    },
    "jobDefinitionName": "job-definition-321",
    "cloudProvider": "AWS"
  }
]""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/tasks/<taskId>/jobs/cancel", methods=["POST"])
def endpoint_POST__htc_projects_projectId_tasks_taskId_jobs_cancel(projectId, taskId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return "", 200
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/tasks/<taskId>/jobs/<jobId>", methods=["GET"])
def endpoint_GET__htc_projects_projectId_tasks_taskId_jobs_jobId_(projectId, taskId, jobId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "jobUUID": "155f18d4",
  "providerJobId": "provider-id-12345",
  "region": "AWS_AP_SOUTHEAST_1",
  "taskId": "task-12345",
  "projectId": "project-12345",
  "status": "SUBMITTED_TO_RESCALE",
  "statusReason": "Completed",
  "container": {
    "exitCode": 3,
    "reason": "Container Exited"
  },
  "createdAt": "2022-03-10T16:15:50Z",
  "createdBy": "qWoUF",
  "failureCode": "ErrorTimeout",
  "workspaceId": "04-8098234",
  "group": "sample-group",
  "commands": [
    "python",
    "script.py"
  ],
  "envs": [
    {
      "name": "FOO",
      "value": "bar"
    }
  ],
  "jobExecutionEnvironment": {
    "instanceId": "123456789",
    "instanceType": "c7g.medium",
    "architecture": 2
  },
  "tags": [
    {
      "key": "HOME",
      "value": "/home/users/"
    }
  ],
  "architecture": "AARCH64",
  "maxVCpus": 0,
  "maxMemory": 0,
  "maxDiskGiB": 0,
  "maxSwap": 0,
  "imageName": "string",
  "execTimeoutSeconds": 0,
  "updatedAt": "2022-03-10T16:15:50Z",
  "instanceId": "string",
  "instanceLabels": {
    "csp": "string",
    "priority": "string",
    "instanceType": "string",
    "instanceArchitecture": "string",
    "accountId": "string",
    "region": "string"
  },
  "startedAt": "2022-03-10T16:15:50Z",
  "completedAt": "2022-03-10T16:15:50Z"
}""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/tasks/<taskId>/jobs/<jobId>/events", methods=["GET"])
def endpoint_GET__htc_projects_projectId_tasks_taskId_jobs_jobId_events(projectId, taskId, jobId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "items": [
    {
      "eventId": "event-13",
      "jobId": "job-12345",
      "dateTime": "2022-03-10T16:15:50Z",
      "statusReason": "Completed",
      "container": {
        "exitCode": 3,
        "reason": "Container Exited"
      },
      "status": "SUBMITTED_TO_RESCALE",
      "instanceLabels": {
        "csp": "string",
        "priority": "string",
        "instanceType": "string",
        "instanceArchitecture": "string",
        "accountId": "string",
        "region": "string"
      },
      "instanceId": "string",
      "userCancelledEvent": true
    }
  ],
  "next": "https://page2.com"
}""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/projects/<projectId>/tasks/<taskId>/jobs/<jobId>/logs", methods=["GET"])
def endpoint_GET__htc_projects_projectId_tasks_taskId_jobs_jobId_logs(projectId, taskId, jobId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "items": [
    {
      "timestamp": "2022-03-10T16:15:50Z",
      "message": "JOB COMPLETED SUCCESSFULLY"
    }
  ],
  "next": "https://page2.com"
}""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/storage", methods=["GET"])
def endpoint_GET__htc_storage():
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""[
  {
    "storageName": "my-storage",
    "region": "AWS_AP_SOUTHEAST_1",
    "provider": "AWS"
  }
]""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/storage/region/<region>", methods=["GET"])
def endpoint_GET__htc_storage_region_region_(region):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "storageName": "my-storage",
  "region": "AWS_AP_SOUTHEAST_1",
  "provider": "AWS"
}""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/workspaces/<workspaceId>/dimensions", methods=["GET"])
def endpoint_GET__htc_workspaces_workspaceId_dimensions(workspaceId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""[
  {
    "derived": {
      "architecture": "AARCH64",
      "vCPUs": 0,
      "memory": 0
    },
    "machineType": "t2d-standard-16",
    "priority": "ON_DEMAND_PRIORITY",
    "region": "AWS_AP_SOUTHEAST_1",
    "computeScalingPolicy": "PROFILE_UNSPECIFIED",
    "hyperthreading": true
  }
]""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/workspaces/<workspaceId>/limits", methods=["GET"])
def endpoint_GET__htc_workspaces_workspaceId_limits(workspaceId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "createdBy": "qWoUF",
  "vCPUs": 999999,
  "updatedBy": "qWoUF",
  "updatedAt": "",
  "createdAt": "",
  "workspaceId": "04-8473942"
}""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/workspaces/<workspaceId>/task-retention-policy", methods=["GET"])
def endpoint_GET__htc_workspaces_workspaceId_task_retention_policy(workspaceId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 200:
        return (jsonify(json.loads("""{
  "workspaceId": "workspace-12345",
  "deleteAfter": 24,
  "archiveAfter": 168,
  "createdAt": "2022-03-10T16:15:50Z"
}""")), 200 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

@app.route("/htc/workspaces/<workspaceId>/task-retention-policy", methods=["PUT"])
def endpoint_PUT__htc_workspaces_workspaceId_task_retention_policy(workspaceId):
    target_status = int(os.environ.get('RESCALEHTC_MOCK_TARGET_STATUS', 0))
    if not target_status or target_status == 201:
        return (jsonify(json.loads("""{
  "workspaceId": "workspace-12345",
  "deleteAfter": 24,
  "archiveAfter": 168,
  "createdAt": "2022-03-10T16:15:50Z"
}""")), 201 )
    if target_status == 401:
        return "", 401
    if target_status == 403:
        return "", 403
    raise Exception

# END_AUTOGENERATED_API

"""Anything below here should persist, outside of the autogenerated block"""
